/*
 * This file is generated by jOOQ.
 */
package com.getartur.billingcore.shared.domain.jooq.tables.records;


import com.getartur.billingcore.shared.domain.jooq.tables.SubProject;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubProjectRecord extends UpdatableRecordImpl<SubProjectRecord> implements Record4<Long, Long, String, BigDecimal> {

    private static final long serialVersionUID = -1383651397;

    /**
     * Setter for <code>getartur.sub_project.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>getartur.sub_project.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>getartur.sub_project.project_id</code>.
     */
    public void setProjectId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>getartur.sub_project.project_id</code>.
     */
    public Long getProjectId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>getartur.sub_project.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>getartur.sub_project.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>getartur.sub_project.pass_factor</code>.
     */
    public void setPassFactor(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>getartur.sub_project.pass_factor</code>.
     */
    public BigDecimal getPassFactor() {
        return (BigDecimal) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, String, BigDecimal> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return SubProject.SUB_PROJECT.ID;
    }

    @Override
    public Field<Long> field2() {
        return SubProject.SUB_PROJECT.PROJECT_ID;
    }

    @Override
    public Field<String> field3() {
        return SubProject.SUB_PROJECT.NAME;
    }

    @Override
    public Field<BigDecimal> field4() {
        return SubProject.SUB_PROJECT.PASS_FACTOR;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getProjectId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public BigDecimal component4() {
        return getPassFactor();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getProjectId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public BigDecimal value4() {
        return getPassFactor();
    }

    @Override
    public SubProjectRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public SubProjectRecord value2(Long value) {
        setProjectId(value);
        return this;
    }

    @Override
    public SubProjectRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public SubProjectRecord value4(BigDecimal value) {
        setPassFactor(value);
        return this;
    }

    @Override
    public SubProjectRecord values(Long value1, Long value2, String value3, BigDecimal value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubProjectRecord
     */
    public SubProjectRecord() {
        super(SubProject.SUB_PROJECT);
    }

    /**
     * Create a detached, initialised SubProjectRecord
     */
    public SubProjectRecord(Long id, Long projectId, String name, BigDecimal passFactor) {
        super(SubProject.SUB_PROJECT);

        set(0, id);
        set(1, projectId);
        set(2, name);
        set(3, passFactor);
    }
}
