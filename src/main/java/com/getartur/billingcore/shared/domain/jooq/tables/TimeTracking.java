/*
 * This file is generated by jOOQ.
 */
package com.getartur.billingcore.shared.domain.jooq.tables;


import com.getartur.billingcore.shared.domain.jooq.Getartur;
import com.getartur.billingcore.shared.domain.jooq.Keys;
import com.getartur.billingcore.shared.domain.jooq.tables.records.TimeTrackingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeTracking extends TableImpl<TimeTrackingRecord> {

    private static final long serialVersionUID = 223485718;

    /**
     * The reference instance of <code>getartur.time_tracking</code>
     */
    public static final TimeTracking TIME_TRACKING = new TimeTracking();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimeTrackingRecord> getRecordType() {
        return TimeTrackingRecord.class;
    }

    /**
     * The column <code>getartur.time_tracking.id</code>.
     */
    public final TableField<TimeTrackingRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>getartur.time_tracking.project_id</code>.
     */
    public final TableField<TimeTrackingRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>getartur.time_tracking.description</code>.
     */
    public final TableField<TimeTrackingRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>getartur.time_tracking.start</code>.
     */
    public final TableField<TimeTrackingRecord, LocalDateTime> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>getartur.time_tracking.end</code>.
     */
    public final TableField<TimeTrackingRecord, LocalDateTime> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>getartur.time_tracking.duration_in_minutes</code>.
     */
    public final TableField<TimeTrackingRecord, Integer> DURATION_IN_MINUTES = createField(DSL.name("duration_in_minutes"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>getartur.time_tracking.billed</code>.
     */
    public final TableField<TimeTrackingRecord, Boolean> BILLED = createField(DSL.name("billed"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>getartur.time_tracking.created</code>.
     */
    public final TableField<TimeTrackingRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>getartur.time_tracking</code> table reference
     */
    public TimeTracking() {
        this(DSL.name("time_tracking"), null);
    }

    /**
     * Create an aliased <code>getartur.time_tracking</code> table reference
     */
    public TimeTracking(String alias) {
        this(DSL.name(alias), TIME_TRACKING);
    }

    /**
     * Create an aliased <code>getartur.time_tracking</code> table reference
     */
    public TimeTracking(Name alias) {
        this(alias, TIME_TRACKING);
    }

    private TimeTracking(Name alias, Table<TimeTrackingRecord> aliased) {
        this(alias, aliased, null);
    }

    private TimeTracking(Name alias, Table<TimeTrackingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TimeTracking(Table<O> child, ForeignKey<O, TimeTrackingRecord> key) {
        super(child, key, TIME_TRACKING);
    }

    @Override
    public Schema getSchema() {
        return Getartur.GETARTUR;
    }

    @Override
    public Identity<TimeTrackingRecord, Long> getIdentity() {
        return Keys.IDENTITY_TIME_TRACKING;
    }

    @Override
    public UniqueKey<TimeTrackingRecord> getPrimaryKey() {
        return Keys.KEY_TIME_TRACKING_PRIMARY;
    }

    @Override
    public List<UniqueKey<TimeTrackingRecord>> getKeys() {
        return Arrays.<UniqueKey<TimeTrackingRecord>>asList(Keys.KEY_TIME_TRACKING_PRIMARY);
    }

    @Override
    public List<ForeignKey<TimeTrackingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TimeTrackingRecord, ?>>asList(Keys.FK_PROJECT_TIME_TRACKING);
    }

    public Project project() {
        return new Project(this, Keys.FK_PROJECT_TIME_TRACKING);
    }

    @Override
    public TimeTracking as(String alias) {
        return new TimeTracking(DSL.name(alias), this);
    }

    @Override
    public TimeTracking as(Name alias) {
        return new TimeTracking(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeTracking rename(String name) {
        return new TimeTracking(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeTracking rename(Name name) {
        return new TimeTracking(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, LocalDateTime, LocalDateTime, Integer, Boolean, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
